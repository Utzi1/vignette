knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
setwd("/home/bachelor/Bachelor/Paket_BHT/BTBA1")
library(tidyverse)
library(devtools)
library(pander)
load_all(path = "~/Bachelor/Paket_BHT/BTBA1/")
1 + 1 # das ist ein Kommenta (alles nach dem #)
1 + 2 # das sollte selbstverständlich sein
4 / 2 # auch das sollte selbstverständlich sei
2 ^ 2 # zwei im quadrat
pi    # das hier ist pi
cos( pi ) # die trigonometrische Funktion cos von pi
sin( pi ) # die trigonometrische Funktion sin von pi
e  <- exp(1) # hier wird e zur eulerschen Zahl
print( e ) # print() kann uns die Variable e printen
log( e ) # was ist der ln von e?
# einen Vektor
Vektor.1  <- c( 1, 2, 3, 4 ) # das c macht aus dem eingeklammerten
# eine Vektor
Vektor.2  <- c( 5, 6, 7, 8 )
Vektor.3  <- Vektor.1 * Vektor.1 # man kann viel mit Vektoren anstellen
# ein Tibble ist eine Tabelle
Vektoren <- tibble (
Vektor.1,
Vektor.2,
Vektor.3
)
# eine Liste bietet Platz für viel Information:
Liste  <- list( "Buchstaben" = c('a', 'b', 'c'),
"Zahlen" = c(1, 2, 3),
"Ein Satz" = "Ick kann janich so viel fressen, wie ick kotzen möchte!
, Max Liebermann")
# Wenn wir nur den Namen eines Objekt schreiben
# bekommen wir das Objekt ausgegeben
Vektor.1
Vektor.2
Vektor.3
Vektoren
Liste
# von eins bis 10 zählen:
x  <- 1:10 %>% # eine Pipe, eine 'Röhre' zwischen den Funktinen
print()
# Von 1 bis 10 in 0.5-er Schritten:
x  <- seq(1, 10, 0.5) %>%
print()
# einen Vektor der Länge 5 generieren:
x <- seq(1, 10, len = 5) %>%
print()
print("Albatross")
Albatross <- 'Legehenne'
print(Albatross)
Satz <- "Die Legehenne kennt's Eierlegen gut, sie macht's die ganze Zeit"
print(Satz)
# Laden der benötigten Funktion
library(readxl)
# Anwenden der Funktion
Rohdaten <- read_excel("~/Bachelor/Paket_BHT/Methoden_generell/aerober_abbau_detergenzien.xlsx")
print(Rohdaten)
# das Arithmetische Mittel:
mean(Rohdaten$`O2 [mg/L] davor`)
# und einen Boxplot:
boxplot(Rohdaten$`O2 [mg/L] davor`)
summary(Rohdaten$`O2 [mg/L] davor`)
library(outliers) # laden des Paketes
# der Dixon-Test:
dixon.test(Rohdaten$`O2 [mg/L] davor`)
# Grubbs-Test:
grubbs.test(Rohdaten$`O2 [mg/L] davor`)
# Chi-im-quadrat-Test:
chisq.out.test(Rohdaten$`O2 [mg/L] davor`)
# entfernen des Ausreißer:
rm.outlier(Rohdaten$`O2 [mg/L] davor`) %>%
boxplot()
# Filtern der sinvollen Werte
library(dplyr) # laden des benötigten Paket
Daten <- filter(Rohdaten
, Rohdaten$"O2 [mg/L] davor" > 1) %>%
print()
Vektor.1 <- c(1, 2, 3, 4, 5)
# Wollen wir mal sehen, was %in% kann:
3 %in% Vektor.1
# man kann auch Vektoren in Vektoren suchen
c( 3, 4) %in% Vektor.1
# Was passier, wenn ein Element nich vorkommt?
c(0, 22, 3) %in% Vektor.1
# Wir berechnen die Differenz aus "davor" und "danach"
mutate(Daten, Differenz = (Daten$ - "O2 [mg/L] davor"))
# Wir berechnen die Differenz aus "davor" und "danach"
mutate(Daten, Differenz = (Daten$`O2 [mg/L] danach` - "O2 [mg/L] davor"))
# Wir berechnen die Differenz aus "davor" und "danach"
mutate(Daten, Differenz = (Daten$`O2 [mg/L] danach` - Daten$`O2 [mg/L] davor`))
# Wir berechnen die Differenz aus "davor" und "danach"
mutate(Daten, Differenz = (`O2 [mg/L] danach` - `O2 [mg/L] davor`))
# Wir berechnen die Differenz aus "davor" und "danach"
mutate(Daten, Differenz = (`O2 [mg/L] davor`-`O2 [mg/L] danach` ))
# Wir berechnen die Differenz aus "davor" und "danach"
mutate(Daten, Differenz = (`O2 [mg/L] davor` - `O2 [mg/L] danach` ))
5.8-2.5
8.3 -5.8
# Und nehemen eine Umbenenneung vor:
rename(Daten, `O2 [mg/L] davor` = O_2_davor, `O2 [mg/L] danach` = O_2_danach )
# Und nehemen eine Umbenenneung vor:
rename(Daten, `O2 [mg/L] davor` = O_2_davor)
# Wir berechnen die Differenz aus "davor" und "danach"
mutate(Daten, Differenz = (`O2 [mg/L] davor` - `O2 [mg/L] danach` ))
# Und nehemen eine Umbenenneung vor:
rename(Daten, `O2 [mg/L] davor` = O_2_davor)
# Und nehemen eine Umbenenneung vor:
rename(Daten, Daten$`O2 [mg/L] davor` = O_2_davor)
# Und nehemen eine Umbenenneung vor:
rename(Daten, Daten$`O2 [mg/L] davor`=O_2_davor)
# Und nehemen eine Umbenenneung vor:
rename(Daten, Daten$`O2 [mg/L] davor`=O_2_davor)
# Und nehemen eine Umbenenneung vor:
rename(Daten,`O2 [mg/L] davor`=O_2_davor)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
setwd("/home/bachelor/Bachelor/Paket_BHT/BTBA1")
library(tidyverse)
library(devtools)
library(pander)
load_all(path = "~/Bachelor/Paket_BHT/BTBA1/")
1 + 1 # das ist ein Kommenta (alles nach dem #)
1 + 2 # das sollte selbstverständlich sein
4 / 2 # auch das sollte selbstverständlich sei
2 ^ 2 # zwei im quadrat
pi    # das hier ist pi
cos( pi ) # die trigonometrische Funktion cos von pi
sin( pi ) # die trigonometrische Funktion sin von pi
e  <- exp(1) # hier wird e zur eulerschen Zahl
print( e ) # print() kann uns die Variable e printen
log( e ) # was ist der ln von e?
# einen Vektor
Vektor.1  <- c( 1, 2, 3, 4 ) # das c macht aus dem eingeklammerten
# eine Vektor
Vektor.2  <- c( 5, 6, 7, 8 )
Vektor.3  <- Vektor.1 * Vektor.1 # man kann viel mit Vektoren anstellen
# ein Tibble ist eine Tabelle
Vektoren <- tibble (
Vektor.1,
Vektor.2,
Vektor.3
)
# eine Liste bietet Platz für viel Information:
Liste  <- list( "Buchstaben" = c('a', 'b', 'c'),
"Zahlen" = c(1, 2, 3),
"Ein Satz" = "Ick kann janich so viel fressen, wie ick kotzen möchte!
, Max Liebermann")
# Wenn wir nur den Namen eines Objekt schreiben
# bekommen wir das Objekt ausgegeben
Vektor.1
Vektor.2
Vektor.3
Vektoren
Liste
# von eins bis 10 zählen:
x  <- 1:10 %>% # eine Pipe, eine 'Röhre' zwischen den Funktinen
print()
# Von 1 bis 10 in 0.5-er Schritten:
x  <- seq(1, 10, 0.5) %>%
print()
# einen Vektor der Länge 5 generieren:
x <- seq(1, 10, len = 5) %>%
print()
print("Albatross")
Albatross <- 'Legehenne'
print(Albatross)
Satz <- "Die Legehenne kennt's Eierlegen gut, sie macht's die ganze Zeit"
print(Satz)
# Laden der benötigten Funktion
library(readxl)
# Anwenden der Funktion
Rohdaten <- read_excel("~/Bachelor/Paket_BHT/Methoden_generell/aerober_abbau_detergenzien.xlsx")
print(Rohdaten)
# das Arithmetische Mittel:
mean(Rohdaten$`O2 [mg/L] davor`)
# und einen Boxplot:
boxplot(Rohdaten$`O2 [mg/L] davor`)
summary(Rohdaten$`O2 [mg/L] davor`)
library(outliers) # laden des Paketes
# der Dixon-Test:
dixon.test(Rohdaten$`O2 [mg/L] davor`)
# Grubbs-Test:
grubbs.test(Rohdaten$`O2 [mg/L] davor`)
# Chi-im-quadrat-Test:
chisq.out.test(Rohdaten$`O2 [mg/L] davor`)
# entfernen des Ausreißer:
rm.outlier(Rohdaten$`O2 [mg/L] davor`) %>%
boxplot()
# Filtern der sinvollen Werte
library(dplyr) # laden des benötigten Paket
Daten <- filter(Rohdaten
, Rohdaten$"O2 [mg/L] davor" > 1) %>%
print()
Vektor.1 <- c(1, 2, 3, 4, 5)
# Wollen wir mal sehen, was %in% kann:
3 %in% Vektor.1
# man kann auch Vektoren in Vektoren suchen
c( 3, 4) %in% Vektor.1
# Was passier, wenn ein Element nich vorkommt?
c(0, 22, 3) %in% Vektor.1
# Wir berechnen die Differenz aus "davor" und "danach"
mutate(Daten, Differenz = (`O2 [mg/L] davor` - `O2 [mg/L] danach` ))
# Und nehemen eine Umbenenneung vor:
rename(Daten, `O2 [mg/L] davor`=O_2_davor)
# Wir berechnen die Differenz aus "davor" und "danach"
mutate(Daten, Differenz = (`O2 [mg/L] davor` - `O2 [mg/L] danach` ))
Daten$Delta %in% Daten$Differenz
# Wir berechnen die Differenz aus "davor" und "danach"
mutate(Daten, Differenz = (`O2 [mg/L] davor` - `O2 [mg/L] danach` ))
Daten$Delta %in% Daten$Differenz
# Wir berechnen die Differenz aus "davor" und "danach"
Daten <- mutate(Daten, Differenz = (`O2 [mg/L] davor` - `O2 [mg/L] danach` ))
Daten$Delta %in% Daten$Differenz
# Wir berechnen die Differenz aus "davor" und "danach"
Daten <- mutate(Daten, Differenz = (`O2 [mg/L] davor` - `O2 [mg/L] danach` ))
Daten$Delta %in% Daten$Differenz
Daten$Delta == Daten$Differenz
Daten$Delta == Daten$Differenz
# Wir berechnen die Differenz aus "davor" und "danach"
Daten <- mutate(Daten, Differenz = (`O2 [mg/L] davor` - `O2 [mg/L] danach` ))
Daten$Delta == Daten$Differenz
Daten$Delta in Daten$Differenz
all(Daten$Delta == Daten$Differenz)
identical(Daten$Delta, Daten$Differenz)
wich(Daten$Delta != Daten$Differenz)
which(Daten$Delta != Daten$Differenz)
typeof(Daten$Delta)
typeof(Daten$Differenz)
print(Daten)
