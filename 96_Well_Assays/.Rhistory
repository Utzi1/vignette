Durch die Multiplikation mit dem Verdünnungsfaktor werden sie verstärkt sind aber für die Auswertung nicht relevant.
Die Urinproben der "Patienten" werden auch im ersten Schritt separiert:
```{r}
Ergebnisse.Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
)
pander(Ergebnisse.Patienten)
```
Um die Auswertung zu erleichtern bietet es sich an eine Funktion einzuführen um die Konzentration aus dem selben Modell zu berechnen:
```{r}
cHSA <- function (abs.P) {
conc_eval( abs.P, abs_std = HSA$Std, conc_std = subs)
}
```
Mit dieser Funktion können wir dann weiterrechnen:
```{r}
Ergebnisse.Patienten <- mutate(Ergebnisse.Patienten, cHSA(Patient.1), cHSA(Patient.2))
pander(Ergebnisse.Patienten)
```
Als nächstes wollen wir die Probenkonzentrationen untersuche, davor müssen wir diese aber auch aus den Rohdaten extrahieren.
Die Versuchsdurchführung sieht vor, dass die Proben (Urinproben der Studenten) in zwei verschiedenen Konzentrationen in den selben Spalten auftragen, diese müssen nun getrennt werden:
```{r}
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
```
Nach diesem Schritt können wir nun die Konzentration der verdünnten Proben bestimmen, es bleibt zu beachten, dass die Standardreihe im ng-Bereich konzentriert ist.
Die Konzentrationen werden mit Biotech::conc_eval ermittelt:
```{r}
Ergebnisse <- tibble(
conc.Proben.1 = conc_eval(abs_P = Proben.1, HSA$Std, subs),
conc.Proben.2 = conc_eval(abs_P = Proben.2, HSA$Std, subs)
)
pander(Ergebnisse)
```
Uns ist bekannt, dass die Proben der Studenten für Proben.1 und Proben.2 1:1000 und 1:5000 verdünnt wurden, diese Information kann gleich ergänzt werden:
```{r}
Ergebnisse <- mutate(Ergebnisse, ist.conc.Proben.1 = conc.Proben.1 * 1000)
Ergebnisse <- mutate(Ergebnisse, ist.conc.Proben.2 = conc.Proben.2 * 5000)
pander(Ergebnisse)
```
Die Ergebnisse sind nun also die Konzentration der Proben in Nanogramm HSA je ml, die negativen Werte sind wahrscheinlich aus Proben entstanden, welche kein HSA enthielten und bei der Messung durch den Messfehler der teilweise veralteten Plattenleser entstanden.
Durch die Multiplikation mit dem Verdünnungsfaktor werden sie verstärkt sind aber für die Auswertung nicht relevant.
Die Urinproben der "Patienten" werden auch im ersten Schritt separiert:
```{r}
Ergebnisse.Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
)
pander(Ergebnisse.Patienten)
```
Um die Auswertung zu erleichtern bietet es sich an eine Funktion einzuführen um die Konzentration aus dem selben Modell zu berechnen:
```{r}
cHSA <- function (abs.P) {
conc_eval( abs.P, abs_std = HSA$Std, conc_std = subs)
}
```
Mit dieser Funktion können wir dann weiterrechnen:
```{r}
Ergebnisse.Patienten <- mutate(Ergebnisse.Patienten, cHSA(Patient.1), cHSA(Patient.2))
pander(Ergebnisse.Patienten)
```
cHSA(.55)
```{r}
Ergebnisse <- mutate(Ergebnisse, ist.conc.Proben.1 = conc.Proben.1 * 1000)
Ergebnisse <- mutate(Ergebnisse, ist.conc.Proben.2 = conc.Proben.2 * 5000)
# Substratkonzentration errechnen:
subs <- seq(0, 50, length.out = length(HSA$Std))
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
pander(HSA)
```{r}
# Laden der Pakete
library(devtools)
load_all("../../Biotech")
# Substratkonzentration errechnen:
subs <- seq(0, 50, length.out = length(HSA$Std))
# plotten des Modells
plot_regression(abs = HSA$Std, conc = subs)
# Laden der Pakete
library(devtools)
load_all("../../Biotech")
# Substratkonzentration errechnen:
subs <- seq(0, 50, length.out = length(HSA$Std))
# plotten des Modells
plot_regression(abs = HSA$Std, conc = subs)
Als nächstes wollen wir die Probenkonzentrationen untersuche, davor müssen wir diese aber auch aus den Rohdaten extrahieren.
Die Versuchsdurchführung sieht vor, dass die Proben (Urinproben der Studenten) in zwei verschiedenen Konzentrationen in den selben Spalten auftragen, diese müssen nun getrennt werden:
```{r}
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
```
Nach diesem Schritt können wir nun die Konzentration der verdünnten Proben bestimmen, es bleibt zu beachten, dass die Standardreihe im ng-Bereich konzentriert ist.
Die Konzentrationen werden mit Biotech::conc_eval ermittelt:
```{r}
Ergebnisse <- tibble(
conc.Proben.1 = conc_eval(abs_P = Proben.1, HSA$Std, subs),
conc.Proben.2 = conc_eval(abs_P = Proben.2, HSA$Std, subs)
)
pander(Ergebnisse)
```
Uns ist bekannt, dass die Proben der Studenten für Proben.1 und Proben.2 1:1000 und 1:5000 verdünnt wurden, diese Information kann gleich ergänzt werden:
```{r}
Ergebnisse <- mutate(Ergebnisse, ist.conc.Proben.1 = conc.Proben.1 * 1000)
Ergebnisse <- mutate(Ergebnisse, ist.conc.Proben.2 = conc.Proben.2 * 5000)
pander(Ergebnisse)
```
Die Ergebnisse sind nun also die Konzentration der Proben in Nanogramm HSA je ml, die negativen Werte sind wahrscheinlich aus Proben entstanden, welche kein HSA enthielten und bei der Messung durch den Messfehler der teilweise veralteten Plattenleser entstanden.
Durch die Multiplikation mit dem Verdünnungsfaktor werden sie verstärkt sind aber für die Auswertung nicht relevant.
Die Urinproben der "Patienten" werden auch im ersten Schritt separiert:
```{r}
Ergebnisse.Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
)
pander(Ergebnisse.Patienten)
```
Um die Auswertung zu erleichtern bietet es sich an eine Funktion einzuführen um die Konzentration aus dem selben Modell zu berechnen:
```{r}
cHSA <- function (abs.P) {
conc_eval( abs.P, abs_std = HSA$Std, conc_std = subs)
}
```
Mit dieser Funktion können wir dann weiterrechnen:
```{r}
cHSA(.55)
Ergebnisse.Patienten <- mutate(Ergebnisse.Patienten, cHSA(Ergebnisse.Patienten$), cHSA(Patient.2))
pander(Ergebnisse.Patienten)
```
```{r}
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
Ergebnisse <- tibble(
conc.Proben.1 = conc_eval(abs_P = Proben.1, HSA$Std, subs),
conc.Proben.2 = conc_eval(abs_P = Proben.2, HSA$Std, subs)
)
pander(Ergebnisse)
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)*1000
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)*1000
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
Als nächstes wollen wir die Probenkonzentrationen untersuche, davor müssen wir diese aber auch aus den Rohdaten extrahieren.
Die Versuchsdurchführung sieht vor, dass die Proben (Urinproben der Studenten) in zwei verschiedenen Konzentrationen in den selben Spalten auftragen, diese müssen nun getrennt werden:
```{r}
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)*1000
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
```
Nach diesem Schritt können wir nun die Konzentration der verdünnten Proben bestimmen, es bleibt zu beachten, dass die Standardreihe im ng-Bereich konzentriert ist.
Die Konzentrationen werden mit Biotech::conc_eval ermittelt:
```{r}
Ergebnisse <- tibble(
conc.Proben.1 = conc_eval(abs_P = Proben.1, HSA$Std, subs),
conc.Proben.2 = conc_eval(abs_P = Proben.2, HSA$Std, subs)
)
pander(Ergebnisse)
```
Uns ist bekannt, dass die Proben der Studenten für Proben.1 und Proben.2 1:1000 und 1:5000 verdünnt wurden, diese Information kann gleich ergänzt werden:
```{r}
Ergebnisse <- mutate(Ergebnisse, ist.conc.Proben.1 = conc.Proben.1 * 1000)
Ergebnisse <- mutate(Ergebnisse, ist.conc.Proben.2 = conc.Proben.2 * 5000)
pander(Ergebnisse)
```
Die Ergebnisse sind nun also die Konzentration der Proben in Nanogramm HSA je ml, die negativen Werte sind wahrscheinlich aus Proben entstanden, welche kein HSA enthielten und bei der Messung durch den Messfehler der teilweise veralteten Plattenleser entstanden.
Durch die Multiplikation mit dem Verdünnungsfaktor werden sie verstärkt sind aber für die Auswertung nicht relevant.
Die Urinproben der "Patienten" werden auch im ersten Schritt separiert:
```{r}
Ergebnisse.Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
)
pander(Ergebnisse.Patienten)
```
Um die Auswertung zu erleichtern bietet es sich an eine Funktion einzuführen um die Konzentration aus dem selben Modell zu berechnen:
```{r}
cHSA <- function (abs.P) {
conc_eval( abs.P, abs_std = HSA$Std, conc_std = subs)
}
```
Mit dieser Funktion können wir dann weiterrechnen:
```{r}
cHSA(.55)
Ergebnisse.Patienten <- mutate(Ergebnisse.Patienten, cHSA(Ergebnisse.Patienten$), cHSA(Patient.2))
pander(Ergebnisse.Patienten)
```
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)*1000
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
Ergebnisse <- tibble(
conc.Proben.1 = conc_eval(abs_P = Proben.1, HSA$Std, subs),
conc.Proben.2 = conc_eval(abs_P = Proben.2, HSA$Std, subs)
)
pander(Ergebnisse)
Ergebnisse <- tibble(
conc.Proben.1 = conc_eval(abs_P = Proben.1, HSA$Std, subs) * 1000,
conc.Proben.2 = conc_eval(abs_P = Proben.2, HSA$Std, subs) * 5000
)
pander(Ergebnisse)
```{r}
Ergebnisse <- tibble(
conc.Proben.1 = conc_eval(abs_P = Proben.1, HSA$Std, subs) * 1000,
conc.Proben.2 = conc_eval(abs_P = Proben.2, HSA$Std, subs) * 5000
)
pander(Ergebnisse)
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)*1000
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)*5000
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)*1000
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)*5000
Als nächstes wollen wir die Probenkonzentrationen untersuche, davor müssen wir diese aber auch aus den Rohdaten extrahieren.
Die Versuchsdurchführung sieht vor, dass die Proben (Urinproben der Studenten) in zwei verschiedenen Konzentrationen in den selben Spalten auftragen, diese müssen nun getrennt werden.
Uns ist bekannt, dass die Proben der Studenten für Proben.1 und Proben.2 1:1000 und 1:5000 verdünnt wurden, diese Information kann gleich ergänzt werden:
```{r}
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)*1000
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)*5000
```
Nach diesem Schritt können wir nun die Konzentration der verdünnten Proben bestimmen, es bleibt zu beachten, dass die Standardreihe im ng-Bereich konzentriert ist.
Die Konzentrationen werden mit Biotech::conc_eval ermittelt.
```{r}
Ergebnisse <- tibble(
conc.Proben.1 = conc_eval(abs_P = Proben.1, HSA$Std, subs) ,
conc.Proben.2 = conc_eval(abs_P = Proben.2, HSA$Std, subs)
)
pander(Ergebnisse)
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
View(HSA)
Dieser wird wie der 1. geladen:
```{r}
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
View(HSA)
```
```{r}
HSA_Cleanup <- function(HSA) {
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
pander(HSA)
Proben <- tibble(
Proben.1 = c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2),
Proben.2 = c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
) %>%
pander()
Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
) %>%
pander()
}
HSA_Cleanup <- function(HSA) {
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
pander(HSA)
Proben <- tibble(
Proben.1 = c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2),
Proben.2 = c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
) %>%
pander()
Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
) %>%
pander()
}
HSA_Cleanup(HSA)
```{r}
HSA_Cleanup <- function(HSA) {
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
pander(HSA)
Proben <- tibble(
Proben.1 = c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2),
Proben.2 = c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
)
Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
)
}
HSA.Clara <- HSA_Cleanup(HSA)
pander(HSA.Clara$)
pander(HSA.Clara)
HSA_Cleanup <- function(HSA) {
mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
pander(HSA)
tibble(
Proben.1 = c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2),
Proben.2 = c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
)
tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
)
}
HSA.Clara <- HSA_Cleanup(HSA)
pander(HSA.Clara)
```{r}
HSA_Cleanup <- function(HSA) {
list(  HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3)),
Proben <- tibble(
Proben.1 = c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2),
Proben.2 = c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
),
Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
))
}
HSA.Clara <- HSA_Cleanup(HSA)
pander(HSA.Clara$)
View(HSA.Clara)
pander(HSA.Clara)
plot_regression(abs = HSA.Clara[3], conc = subs )
print(HSA.Clara$Std)
print(HSA.Clara$HSA)
HSA_Cleanup <- function(HSA) {
list(  HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3)),
Proben <- tibble(
Proben.1 = c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2),
Proben.2 = c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
),
Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
))
}
HSA.Clara <- HSA_Cleanup(HSA)
pander(HSA.Clara)
print(HSA.Clara$HSA)
print(HSA.Clara[[1]])
print(HSA.Clara[[1]]$Std)
```{r}
plot_regression(abs = HSA.Clara[[1]]$Std, conc = subs )
cHSA <- function(HSA, subs) {
cHSA <- function (abs.P) {
conc_eval( abs.P, abs_std = HSA$Std, conc_std = subs)
}
}
cHSA(HSA.Clara[[1]]$Std, subs)
cHSA <- function(abs.P, HSA, subs) {
conc_eval( abs.P, abs_std = HSA$Std, conc_std = subs)
}
(cHSA(HSA.Clara[[1]]$Std, subs = subs, abs.P = HSA.Clara[[2]]$Proben.1))
conc_eval(HSA.Clara[[2]]$Proben.1)
conc_eval(HSA.Clara[[2]]$Proben.1, abs_std = HSA.Clara[[1]]$Std, conc_std = subs)
```{r}
cHSA <- function(HSA, Proben.x, subs) {
conc_eval(abs_P =  HSA[[2]]$Proben.x, abs_std = HSA[[1]]$Std, conc_std = subs)
}
cHSA(HSA = HSA.Clara,Proben.x = Proben.1, subs = subs)
cHSA <- function(HSA, Proben.x, subs) {
conc_eval(abs_P = Proben.x, abs_std = HSA[[1]]$Std, conc_std = subs)
}
cHSA(HSA = HSA.Clara, Proben.x = HSA.Clara[[2]]$Proben.2, subs = subs)
cHSA(HSA = HSA.Clara, Proben.x = HSA.Clara[[2]]$Proben.1, subs = subs)
Ergebnisse.Proben <- tibble(cHSA(
HSA = HSA.Clara, Proben.x = HSA.Clara[[2]]$Proben.1, subs = subs),
cHSA(HSA = HSA.Clara, Proben.x = HSA.Clara[[2]]$Proben.2, subs = subs)
)
Ergebnisse.Proben <- tibble(cHSA(
HSA = HSA.Clara, Proben.x = HSA.Clara[[2]]$Proben.1, subs = subs),
cHSA(HSA = HSA.Clara, Proben.x = HSA.Clara[[2]]$Proben.2, subs = subs)
) %>%
pander()
library(pander)
library(magrittr)
library(readxl)
HSA <- read_excel("HSA_Arno.xlsx", sheet = "Tabelle2")
library(tidyverse)
HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3))
pander(HSA)
# Laden der Pakete
library(devtools)
load_all("../../Biotech")
# Substratkonzentration errechnen:
subs <- seq(0, 50, length.out = length(HSA$Std))
# plotten des Modells
plot_regression(abs = HSA$Std, conc = subs)
lm(subs[2:8]~HSA$Std[2:8]) %>%
summary()
# Die Spalten 5&6, 7&8 sowie 9&10 führen neben einander die
# Probenabsorption
Proben.1 <- c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2)
Proben.2 <- c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
Ergebnisse <- tibble(
conc.Proben.1 = conc_eval(abs_P = Proben.1, HSA$Std, subs),
conc.Proben.2 = conc_eval(abs_P = Proben.2, HSA$Std, subs)
)
pander(Ergebnisse)
Ergebnisse <- mutate(Ergebnisse, ist.conc.Proben.1 = conc.Proben.1 * 1000)
Ergebnisse <- mutate(Ergebnisse, ist.conc.Proben.2 = conc.Proben.2 * 5000)
pander(Ergebnisse)
Ergebnisse.Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
)
pander(Ergebnisse.Patienten)
cHSA <- function (abs.P) {
conc_eval( abs.P, abs_std = HSA$Std, conc_std = subs)
}
Ergebnisse.Patienten <- mutate(Ergebnisse.Patienten, cHSA(Ergebnisse.Patienten$Patient.1), cHSA(Ergebnisse.Patienten$Patient.2))
pander(Ergebnisse.Patienten)
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
HSA_Cleanup <- function(HSA) {
list(  HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3)),
Proben <- tibble(
Proben.1 = c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2),
Proben.2 = c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
),
Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
))
}
HSA.Clara <- HSA_Cleanup(HSA)
pander(HSA.Clara)
plot_regression(abs = HSA.Clara$HSA$Std, conc = subs )
```{r}
```{r}
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
Dieser wird wie der 1. geladen:
```{r}
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
```
Und wie der erste verarbeitet, dafür wurden die Schritte der vorangegangenen Auswertung in einer Funktion zusammengefasst:
```{r}
HSA_Cleanup <- function(HSA) {
list(  HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3)),
Proben <- tibble(
Proben.1 = c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2),
Proben.2 = c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
),
Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
))
}
```{r}
plot_regression(abs = HSA.Clara$HSA$Std, conc = subs )
plot_regression(abs = HSA.Clara[[1]]$Std, conc = subs )
```{r}
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
Dieser wird wie der 1. importiert :
```{r}
library(readxl)
HSA <- read_excel("HSA.xlsx", sheet = "Tabelle2")
```
Und wie der erste verarbeitet, dafür wurden die Schritte der vorangegangenen Auswertung in einer Funktion zusammengefasst:
```{r}
HSA_Cleanup <- function(HSA) {
list(  HSA <- mutate(HSA, Std=((HSA$s2 + HSA$s3 + HSA$s4) / 3)),
Proben <- tibble(
Proben.1 = c((HSA$s5 + HSA$s6)/2 , (HSA$s7[1:4]+HSA$s8[1:4])/2),
Proben.2 = c((HSA$s9 + HSA$s10)/2 , (HSA$s7[5:8]+HSA$s8[5:8])/2)
),
Patienten <- tibble(
Patient.1 = (sum(HSA[1:2, 11], HSA[1:2, 12]) / 4),
Patient.2 = (sum(HSA[4:5, 11], HSA[4:5, 12]) /4)
))
}
HSA.Clara <- HSA_Cleanup(HSA)
pander(HSA.Clara)
HSA.Clara <- HSA_Cleanup(HSA)
pander(HSA.Clara)
HSA.Clara <- HSA_Cleanup(HSA)
pander(HSA.Clara)
HSA.Clara <- HSA_Cleanup(HSA)
pander(HSA.Clara)
lm(HSA.Clara[[1]]$Std[1:8]~conc = subs[1:8])
lm(HSA.Clara[[1]]$Std[1:8]~subs[1:8])
lm(HSA.Clara[[1]]$Std[1:8]~subs[1:8]) %>%
summary()
lm(HSA.Clara[[1]]$Std[1:8]~subs[1:8]) %>%
summary()
lm(HSA.Clara[[1]]$Std[2:8]~subs[2:8]) %>%
summary()
lm(HSA.Clara[[1]]$Std[!4]~subs[!4]) %>%
summary()
lm(HSA.Clara[[1]]$Std[-4]~subs[-4]) %>%
summary()
lm(HSA.Clara[[1]]$Std[1:8]~subs[1:8]) %>%
summary()
lm(HSA.Clara[[1]]$Std[-4]~subs[-4]) %>%
summary()
lm(HSA.Clara[[1]]$Std[1:8]~subs[1:8]) %>%
summary()
lm(HSA.Clara[[1]]$Std[2:8]~subs[2:8]) %>%
summary()
install.packages("mpn#")
install.packages("MPN")
